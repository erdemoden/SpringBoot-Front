{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport withNavigation from './withNavigation';\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur'\n};\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"getPropListener\", eventName => this.props[EventNameToPropName[eventName]]);\n  }\n\n  componentDidMount() {\n    // We register all navigation listeners on mount to ensure listener stability across re-render\n    // A former implementation was replacing (removing/adding) listeners on all update (if prop provided)\n    // but there were issues (see https://github.com/react-navigation/react-navigation/issues/5058)\n    this.subscribeAll();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.navigation !== prevProps.navigation) {\n      this.removeAll();\n      this.subscribeAll();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeAll();\n  }\n\n  subscribeAll() {\n    var _this = this;\n\n    this.subscriptions = {};\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(eventName, function () {\n        const propListener = _this.getPropListener(eventName);\n\n        return propListener && propListener(...arguments);\n      });\n    });\n  }\n\n  removeAll() {\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nexport default withNavigation(NavigationEvents);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,mBAAmB,GAAG;AAC1BC,WAAS,EAAE,aADe;AAE1BC,UAAQ,EAAE,YAFgB;AAG1BC,UAAQ,EAAE,YAHgB;AAI1BC,SAAO,EAAE;AAJiB,CAA5B;AAOA,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAPD,CAAYN,mBAAZM,CAAnB;;AAEA,MAAME,gBAAN,SAA+BV,KAAK,CAACW,SAArC,CAA+C;AAAAC;AAAA;;AAAAC,6CAmB1BC,SAAD,IAAe,KAAKC,KAAL,CAAWb,mBAAmB,CAACY,SAAD,CAA9B,CAnBY;AAAA;;AAC7CE,mBAAiB,GAAG;AAClB;AACA;AACA;AACA,SAAKC,YAAL;AACD;;AAEDC,oBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAI,KAAKJ,KAAL,CAAWK,UAAX,KAA0BD,SAAS,CAACC,UAAxC,EAAoD;AAClD,WAAKC,SAAL;AACA,WAAKJ,YAAL;AACD;AACF;;AAEDK,sBAAoB,GAAG;AACrB,SAAKD,SAAL;AACD;;AAIDJ,cAAY,GAAG;AAAA;;AACb,SAAKM,aAAL,GAAqB,EAArB;AAEAhB,cAAU,CAACiB,OAAXjB,CAAoBO,SAAD,IAAe;AAChC,WAAKS,aAAL,CAAmBT,SAAnB,IAAgC,KAAKC,KAAL,CAAWK,UAAX,CAAsBK,WAAtB,CAC9BX,SAD8B,EAE9B,YAAa;AACX,cAAMY,YAAY,GAAG,MAAKC,eAAL,CAAqBb,SAArB,CAArB;;AACA,eAAOY,YAAY,IAAIA,YAAY,CAAC,YAAD,CAAnC;AAJ4B,QAAhC;AADF;AASD;;AAEDL,WAAS,GAAG;AACVd,cAAU,CAACiB,OAAXjB,CAAoBO,SAAD,IAAe;AAChC,WAAKS,aAAL,CAAmBT,SAAnB,EAA8Bc,MAA9B;AADF;AAGD;;AAEDC,QAAM,GAAG;AACP,WAAO,IAAP;AACD;;AA3C4C;;AA8C/C,eAAe5B,cAAc,CAACS,gBAAD,CAA7B","names":["React","withNavigation","EventNameToPropName","willFocus","didFocus","willBlur","didBlur","EventNames","Object","keys","NavigationEvents","Component","constructor","_defineProperty","eventName","props","componentDidMount","subscribeAll","componentDidUpdate","prevProps","navigation","removeAll","componentWillUnmount","subscriptions","forEach","addListener","propListener","getPropListener","remove","render"],"sources":["/Users/erdemoden/Desktop/React-js/blog-app/node_modules/@react-navigation/core/lib/module/views/NavigationEvents.js"],"sourcesContent":["import * as React from 'react';\nimport withNavigation from './withNavigation';\n\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur',\n};\n\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  componentDidMount() {\n    // We register all navigation listeners on mount to ensure listener stability across re-render\n    // A former implementation was replacing (removing/adding) listeners on all update (if prop provided)\n    // but there were issues (see https://github.com/react-navigation/react-navigation/issues/5058)\n    this.subscribeAll();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.navigation !== prevProps.navigation) {\n      this.removeAll();\n      this.subscribeAll();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeAll();\n  }\n\n  getPropListener = (eventName) => this.props[EventNameToPropName[eventName]];\n\n  subscribeAll() {\n    this.subscriptions = {};\n\n    EventNames.forEach((eventName) => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(\n        eventName,\n        (...args) => {\n          const propListener = this.getPropListener(eventName);\n          return propListener && propListener(...args);\n        }\n      );\n    });\n  }\n\n  removeAll() {\n    EventNames.forEach((eventName) => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withNavigation(NavigationEvents);\n"]},"metadata":{},"sourceType":"module"}