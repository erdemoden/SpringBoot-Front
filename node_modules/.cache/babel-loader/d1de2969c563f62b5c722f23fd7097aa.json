{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Dimensions } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nexport const isOrientationLandscape = _ref => {\n  let {\n    width,\n    height\n  } = _ref;\n  return width > height;\n};\nexport default function (WrappedComponent) {\n  class withOrientation extends React.Component {\n    constructor() {\n      super();\n\n      _defineProperty(this, \"handleOrientationChange\", _ref2 => {\n        let {\n          window\n        } = _ref2;\n        const isLandscape = isOrientationLandscape(window);\n        this.setState({\n          isLandscape\n        });\n      });\n\n      const _isLandscape = isOrientationLandscape(Dimensions.get('window'));\n\n      this.state = {\n        isLandscape: _isLandscape\n      };\n    }\n\n    componentDidMount() {\n      Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.handleOrientationChange);\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(WrappedComponent, _extends({}, this.props, this.state));\n    }\n\n  }\n\n  return hoistNonReactStatic(withOrientation, WrappedComponent);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,mBAAP,MAAgC,yBAAhC;AAEA,OAAO,MAAMC,sBAAsB,GAAG;AAAA,MAAC;AAAEC,SAAF;AAASC;AAAT,GAAD;AAAA,SAAuBD,KAAK,GAAGC,MAA/B;AAAA,CAA/B;AAEP,eAAe,UAAUC,gBAAV,EAA4B;AACzC,QAAMC,eAAN,SAA8BP,KAAK,CAACQ,SAApC,CAA8C;AAC5CC,eAAW,GAAG;AACZ;;AADYC,uDAeY,SAAgB;AAAA,YAAf;AAAEC;AAAF,SAAe;AACxC,cAAMC,WAAW,GAAGT,sBAAsB,CAACQ,MAAD,CAA1C;AACA,aAAKE,QAAL,CAAc;AAAED;AAAF,SAAd;AAjBY;;AAGZ,YAAMA,YAAW,GAAGT,sBAAsB,CAACF,UAAU,CAACa,GAAXb,CAAe,QAAfA,CAAD,CAA1C;;AACA,WAAKc,KAAL,GAAa;AAAEH,mBAAW,EAAXA;AAAF,OAAb;AACD;;AAEDI,qBAAiB,GAAG;AAClBf,gBAAU,CAACgB,gBAAXhB,CAA4B,QAA5BA,EAAsC,KAAKiB,uBAA3CjB;AACD;;AAEDkB,wBAAoB,GAAG;AACrBlB,gBAAU,CAACmB,mBAAXnB,CAA+B,QAA/BA,EAAyC,KAAKiB,uBAA9CjB;AACD;;AAODoB,UAAM,GAAG;AACP,0BAAOrB,oBAACM,gBAAD,eAAsB,KAAKgB,KAA3B,EAAsC,KAAKP,KAA3C,EAAP;AACD;;AAvB2C;;AA0B9C,SAAOb,mBAAmB,CAACK,eAAD,EAAkBD,gBAAlB,CAA1B;AACD","names":["React","Dimensions","hoistNonReactStatic","isOrientationLandscape","width","height","WrappedComponent","withOrientation","Component","constructor","_defineProperty","window","isLandscape","setState","get","state","componentDidMount","addEventListener","handleOrientationChange","componentWillUnmount","removeEventListener","render","props"],"sources":["/Users/erdemoden/Desktop/React-js/blog-app/node_modules/@react-navigation/native/lib/module/withOrientation.js"],"sourcesContent":["import * as React from 'react';\nimport { Dimensions } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\nexport const isOrientationLandscape = ({ width, height }) => width > height;\n\nexport default function (WrappedComponent) {\n  class withOrientation extends React.Component {\n    constructor() {\n      super();\n\n      const isLandscape = isOrientationLandscape(Dimensions.get('window'));\n      this.state = { isLandscape };\n    }\n\n    componentDidMount() {\n      Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.handleOrientationChange);\n    }\n\n    handleOrientationChange = ({ window }) => {\n      const isLandscape = isOrientationLandscape(window);\n      this.setState({ isLandscape });\n    };\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  return hoistNonReactStatic(withOrientation, WrappedComponent);\n}\n"]},"metadata":{},"sourceType":"module"}