{"ast":null,"code":"import getChildRouter from './getChildRouter';\nimport getNavigationActionCreators from './routers/getNavigationActionCreators';\nimport getChildrenNavigationCache from './getChildrenNavigationCache';\nimport getEventManager from './getEventManager';\n\nconst createParamGetter = route => (paramName, defaultValue) => {\n  const params = route.params;\n\n  if (params && paramName in params) {\n    return params[paramName];\n  }\n\n  return defaultValue;\n};\n\nfunction getChildNavigation(navigation, childKey, getCurrentParentNavigation) {\n  const children = getChildrenNavigationCache(navigation);\n  const childRoute = navigation.state.routes.find(r => r.key === childKey);\n\n  if (!childRoute) {\n    return null;\n  }\n\n  if (children[childKey] && children[childKey].state === childRoute) {\n    return children[childKey];\n  }\n\n  const childRouter = getChildRouter(navigation.router, childRoute.routeName); // If the route has children, we'll use this to pass in to the action creators\n  // for the childRouter so that any action that depends on the active route will\n  // behave as expected. We don't explicitly require that routers implement routes\n  // and index properties, but if we did then we would put an invariant here to\n  // ensure that a focusedGrandChildRoute exists if childRouter is defined.\n\n  const focusedGrandChildRoute = childRoute.routes && typeof childRoute.index === 'number' ? childRoute.routes[childRoute.index] : null;\n  const actionCreators = { ...navigation.actions,\n    ...navigation.router.getActionCreators(childRoute, navigation.state.key),\n    ...(childRouter ? childRouter.getActionCreators(focusedGrandChildRoute, childRoute.key) : {}),\n    ...getNavigationActionCreators(childRoute)\n  };\n  const actionHelpers = {};\n  Object.keys(actionCreators).forEach(actionName => {\n    actionHelpers[actionName] = function () {\n      const actionCreator = actionCreators[actionName];\n      const action = actionCreator(...arguments);\n      return navigation.dispatch(action);\n    };\n  });\n  let isFirstRouteInParent = true;\n  const parentNavigation = getCurrentParentNavigation();\n\n  if (parentNavigation) {\n    isFirstRouteInParent = parentNavigation.state.routes.indexOf(childRoute) === 0;\n  }\n\n  if (children[childKey] && children[childKey].isFirstRouteInParent() === isFirstRouteInParent) {\n    children[childKey] = { ...children[childKey],\n      ...actionHelpers,\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute)\n    };\n    return children[childKey];\n  } else {\n    const {\n      addListener,\n      emit\n    } = getEventManager(childKey);\n    children[childKey] = { ...actionHelpers,\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute),\n      getChildNavigation: grandChildKey => getChildNavigation(children[childKey], grandChildKey, () => {\n        const nav = getCurrentParentNavigation();\n        return nav && nav.getChildNavigation(childKey);\n      }),\n      isFocused: () => {\n        const currentNavigation = getCurrentParentNavigation();\n\n        if (!currentNavigation) {\n          return false;\n        }\n\n        const {\n          routes,\n          index\n        } = currentNavigation.state;\n\n        if (!currentNavigation.isFocused()) {\n          return false;\n        }\n\n        if (routes[index].key === childKey) {\n          return true;\n        }\n\n        return false;\n      },\n      isFirstRouteInParent: () => isFirstRouteInParent,\n      dispatch: navigation.dispatch,\n      getScreenProps: navigation.getScreenProps,\n      dangerouslyGetParent: getCurrentParentNavigation,\n      addListener,\n      emit\n    };\n    return children[childKey];\n  }\n}\n\nexport default getChildNavigation;","map":{"version":3,"mappings":"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","names":["getChildRouter","getNavigationActionCreators","getChildrenNavigationCache","getEventManager","createParamGetter","route","paramName","defaultValue","params","getChildNavigation","navigation","childKey","getCurrentParentNavigation","children","childRoute","state","routes","find","r","key","childRouter","router","routeName","focusedGrandChildRoute","index","actionCreators","actions","getActionCreators","actionHelpers","Object","keys","forEach","actionName","actionCreator","action","dispatch","isFirstRouteInParent","parentNavigation","indexOf","getParam","addListener","emit","grandChildKey","nav","isFocused","currentNavigation","getScreenProps","dangerouslyGetParent"],"sources":["/Users/erdemoden/Desktop/React-js/blog-app/node_modules/@react-navigation/core/lib/module/getChildNavigation.js"],"sourcesContent":["import getChildRouter from './getChildRouter';\nimport getNavigationActionCreators from './routers/getNavigationActionCreators';\nimport getChildrenNavigationCache from './getChildrenNavigationCache';\nimport getEventManager from './getEventManager';\n\nconst createParamGetter = (route) => (paramName, defaultValue) => {\n  const params = route.params;\n\n  if (params && paramName in params) {\n    return params[paramName];\n  }\n\n  return defaultValue;\n};\n\nfunction getChildNavigation(navigation, childKey, getCurrentParentNavigation) {\n  const children = getChildrenNavigationCache(navigation);\n  const childRoute = navigation.state.routes.find((r) => r.key === childKey);\n\n  if (!childRoute) {\n    return null;\n  }\n\n  if (children[childKey] && children[childKey].state === childRoute) {\n    return children[childKey];\n  }\n\n  const childRouter = getChildRouter(navigation.router, childRoute.routeName);\n\n  // If the route has children, we'll use this to pass in to the action creators\n  // for the childRouter so that any action that depends on the active route will\n  // behave as expected. We don't explicitly require that routers implement routes\n  // and index properties, but if we did then we would put an invariant here to\n  // ensure that a focusedGrandChildRoute exists if childRouter is defined.\n  const focusedGrandChildRoute =\n    childRoute.routes && typeof childRoute.index === 'number'\n      ? childRoute.routes[childRoute.index]\n      : null;\n\n  const actionCreators = {\n    ...navigation.actions,\n    ...navigation.router.getActionCreators(childRoute, navigation.state.key),\n    ...(childRouter\n      ? childRouter.getActionCreators(focusedGrandChildRoute, childRoute.key)\n      : {}),\n    ...getNavigationActionCreators(childRoute),\n  };\n\n  const actionHelpers = {};\n  Object.keys(actionCreators).forEach((actionName) => {\n    actionHelpers[actionName] = (...args) => {\n      const actionCreator = actionCreators[actionName];\n      const action = actionCreator(...args);\n      return navigation.dispatch(action);\n    };\n  });\n\n  let isFirstRouteInParent = true;\n\n  const parentNavigation = getCurrentParentNavigation();\n\n  if (parentNavigation) {\n    isFirstRouteInParent =\n      parentNavigation.state.routes.indexOf(childRoute) === 0;\n  }\n\n  if (\n    children[childKey] &&\n    children[childKey].isFirstRouteInParent() === isFirstRouteInParent\n  ) {\n    children[childKey] = {\n      ...children[childKey],\n      ...actionHelpers,\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute),\n    };\n    return children[childKey];\n  } else {\n    const { addListener, emit } = getEventManager(childKey);\n\n    children[childKey] = {\n      ...actionHelpers,\n\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute),\n\n      getChildNavigation: (grandChildKey) =>\n        getChildNavigation(children[childKey], grandChildKey, () => {\n          const nav = getCurrentParentNavigation();\n          return nav && nav.getChildNavigation(childKey);\n        }),\n\n      isFocused: () => {\n        const currentNavigation = getCurrentParentNavigation();\n        if (!currentNavigation) {\n          return false;\n        }\n        const { routes, index } = currentNavigation.state;\n        if (!currentNavigation.isFocused()) {\n          return false;\n        }\n        if (routes[index].key === childKey) {\n          return true;\n        }\n        return false;\n      },\n      isFirstRouteInParent: () => isFirstRouteInParent,\n      dispatch: navigation.dispatch,\n      getScreenProps: navigation.getScreenProps,\n      dangerouslyGetParent: getCurrentParentNavigation,\n      addListener,\n      emit,\n    };\n\n    return children[childKey];\n  }\n}\n\nexport default getChildNavigation;\n"]},"metadata":{},"sourceType":"module"}