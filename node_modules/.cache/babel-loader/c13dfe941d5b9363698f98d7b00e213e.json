{"ast":null,"code":"import invariant from './utils/invariant';\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\n\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find(route => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex(route => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some(route => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n    const routes = state.routes.slice();\n    routes.push(route);\n    return { ...state,\n      index: routes.length - 1,\n      routes\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n\n    const routes = state.routes.slice(0, -1);\n    return { ...state,\n      index: routes.length - 1,\n      routes\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n    return { ...state,\n      index\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    invariant(index !== -1, 'attempt to jump to unknown key \"%s\"', key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n    return { ...replaced,\n      routes: replaced.routes.slice(0, index + 1)\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route) {\n    let preserveIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n    return { ...state,\n      index,\n      routes\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(routes.length && Array.isArray(routes), 'invalid routes to replace');\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n    return { ...state,\n      index: nextIndex,\n      routes\n    };\n  }\n\n};\nexport default StateUtils;","map":{"version":3,"mappings":"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","names":["invariant","StateUtils","get","state","key","routes","find","route","indexOf","findIndex","has","some","push","slice","index","length","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAtIndex","replaceAt","preserveIndex","nextIndex","nextState","reset","Array","isArray","undefined","compare","ii","every"],"sources":["/Users/erdemoden/Desktop/React-js/blog-app/node_modules/@react-navigation/core/lib/module/StateUtils.js"],"sourcesContent":["import invariant from './utils/invariant';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find((route) => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex((route) => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some((route) => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    invariant(index !== -1, 'attempt to jump to unknown key \"%s\"', key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1),\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n"]},"metadata":{},"sourceType":"module"}