{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\nimport withNavigation from './withNavigation';\nexport default function withNavigationFocus(Component) {\n  class ComponentWithNavigationFocus extends React.Component {\n    constructor() {\n      super(...arguments);\n\n      _defineProperty(this, \"state\", {\n        isFocused: this.props.navigation.isFocused()\n      });\n    }\n\n    componentDidMount() {\n      const {\n        navigation\n      } = this.props;\n      this.subscriptions = [navigation.addListener('willFocus', () => this.setState({\n        isFocused: true\n      })), navigation.addListener('willBlur', () => this.setState({\n        isFocused: false\n      }))];\n    }\n\n    componentWillUnmount() {\n      var _this$subscriptions;\n\n      (_this$subscriptions = this.subscriptions) === null || _this$subscriptions === void 0 ? void 0 : _this$subscriptions.forEach(sub => sub.remove());\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(Component, _extends({}, this.props, {\n        isFocused: this.state.isFocused,\n        ref: this.props.onRef\n      }));\n    }\n\n  }\n\n  _defineProperty(ComponentWithNavigationFocus, \"displayName\", \"withNavigationFocus(\".concat(Component.displayName || Component.name, \")\"));\n\n  return hoistStatics(withNavigation(ComponentWithNavigationFocus, {\n    forwardRef: false\n  }), Component);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,eAAe,SAASC,mBAAT,CAA6BC,SAA7B,EAAwC;AACrD,QAAMC,4BAAN,SAA2CL,KAAK,CAACI,SAAjD,CAA2D;AAAAE;AAAA;;AAAAC,qCAKjD;AACNC,iBAAS,EAAE,KAAKC,KAAL,CAAWC,UAAX,CAAsBF,SAAtB;AADL,OALiD;AAAA;;AASzDG,qBAAiB,GAAG;AAClB,YAAM;AAAED;AAAF,UAAiB,KAAKD,KAA5B;AAEA,WAAKG,aAAL,GAAqB,CACnBF,UAAU,CAACG,WAAXH,CAAuB,WAAvBA,EAAoC,MAClC,KAAKI,QAAL,CAAc;AAAEN,iBAAS,EAAE;AAAb,OAAd,CADFE,CADmB,EAInBA,UAAU,CAACG,WAAXH,CAAuB,UAAvBA,EAAmC,MACjC,KAAKI,QAAL,CAAc;AAAEN,iBAAS,EAAE;AAAb,OAAd,CADFE,CAJmB,CAArB;AAQD;;AAEDK,wBAAoB,GAAG;AAAA;;AACrB,kCAAKH,aAAL,4EAAoBI,OAApB,CAA6BC,GAAD,IAASA,GAAG,CAACC,MAAJD,EAArC;AACD;;AAEDE,UAAM,GAAG;AACP,0BACEnB,oBAACI,SAAD,eACM,KAAKK,KADX;AAEED,iBAAS,EAAE,KAAKY,KAAL,CAAWZ,SAFxB;AAGEa,WAAG,EAAE,KAAKZ,KAAL,CAAWa;AAHlB,SADF;AAOD;;AAlCwD;;AADNf,kBAC/CF,4BAD+C,+CAGjDD,SAAS,CAACmB,WAAVnB,IAAyBA,SAAS,CAACoB,IAHc;;AAsCrD,SAAOvB,YAAY,CACjBC,cAAc,CAACG,4BAAD,EAA+B;AAAEoB,cAAU,EAAE;AAAd,GAA/B,CADG,EAEjBrB,SAFiB,CAAnB;AAID","names":["React","hoistStatics","withNavigation","withNavigationFocus","Component","ComponentWithNavigationFocus","constructor","_defineProperty","isFocused","props","navigation","componentDidMount","subscriptions","addListener","setState","componentWillUnmount","forEach","sub","remove","render","state","ref","onRef","displayName","name","forwardRef"],"sources":["/Users/erdemoden/Desktop/React-js/blog-app/node_modules/@react-navigation/core/lib/module/views/withNavigationFocus.js"],"sourcesContent":["import * as React from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\nimport withNavigation from './withNavigation';\n\nexport default function withNavigationFocus(Component) {\n  class ComponentWithNavigationFocus extends React.Component {\n    static displayName = `withNavigationFocus(${\n      Component.displayName || Component.name\n    })`;\n\n    state = {\n      isFocused: this.props.navigation.isFocused(),\n    };\n\n    componentDidMount() {\n      const { navigation } = this.props;\n\n      this.subscriptions = [\n        navigation.addListener('willFocus', () =>\n          this.setState({ isFocused: true })\n        ),\n        navigation.addListener('willBlur', () =>\n          this.setState({ isFocused: false })\n        ),\n      ];\n    }\n\n    componentWillUnmount() {\n      this.subscriptions?.forEach((sub) => sub.remove());\n    }\n\n    render() {\n      return (\n        <Component\n          {...this.props}\n          isFocused={this.state.isFocused}\n          ref={this.props.onRef}\n        />\n      );\n    }\n  }\n\n  return hoistStatics(\n    withNavigation(ComponentWithNavigationFocus, { forwardRef: false }),\n    Component\n  );\n}\n"]},"metadata":{},"sourceType":"module"}