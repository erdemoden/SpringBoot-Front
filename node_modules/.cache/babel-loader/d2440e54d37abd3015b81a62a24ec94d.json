{"ast":null,"code":"import * as NavigationActions from '../NavigationActions';\nimport invariant from '../utils/invariant'; // TODO: Type `route`\n\nconst getNavigationActionCreators = route => {\n  return {\n    goBack: key => {\n      let actualizedKey = key;\n\n      if (key === undefined && route.key) {\n        invariant(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n\n      return NavigationActions.back({\n        key: actualizedKey\n      });\n    },\n    navigate: (navigateTo, params, action) => {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params,\n          action\n        });\n      }\n\n      invariant(typeof navigateTo === 'object', 'Must navigateTo an object or a string');\n      invariant(params == null, 'Params must not be provided to .navigate() when specifying an object');\n      invariant(action == null, 'Child action must not be provided to .navigate() when specifying an object');\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: params => {\n      invariant(route.key && typeof route.key === 'string', 'setParams cannot be called by root navigator');\n      return NavigationActions.setParams({\n        params,\n        key: route.key\n      });\n    }\n  };\n};\n\nexport default getNavigationActionCreators;","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,iBAAZ,MAAmC,sBAAnC;AACA,OAAOC,SAAP,MAAsB,oBAAtB,C,CAMA;;AACA,MAAMC,2BAA2B,GAAIC,KAAD,IAAgB;AAClD,SAAO;AACLC,UAAM,EAAGC,GAAD,IAAyB;AAC/B,UAAIC,aAAa,GAAGD,GAApB;;AACA,UAAIA,GAAG,KAAKE,SAARF,IAAqBF,KAAK,CAACE,GAA/B,EAAoC;AAClCJ,iBAAS,CAAC,OAAOE,KAAK,CAACE,GAAb,KAAqB,QAAtB,EAAgC,wBAAhC,CAATJ;AACAK,qBAAa,GAAGH,KAAK,CAACE,GAAtBC;AACD;;AACD,aAAON,iBAAiB,CAACQ,IAAlBR,CAAuB;AAAEK,WAAG,EAAEC;AAAP,OAAvBN,CAAP;AAPG;AASLS,YAAQ,EAAE,CACRC,UADQ,EAERC,MAFQ,EAGRC,MAHQ,KAIL;AACH,UAAI,OAAOF,UAAP,KAAsB,QAA1B,EAAoC;AAClC,eAAOV,iBAAiB,CAACS,QAAlBT,CAA2B;AAChCa,mBAAS,EAAEH,UADqB;AAEhCC,gBAFgC;AAGhCC;AAHgC,SAA3BZ,CAAP;AAKD;;AACDC,eAAS,CACP,OAAOS,UAAP,KAAsB,QADf,EAEP,uCAFO,CAATT;AAIAA,eAAS,CACPU,MAAM,IAAI,IADH,EAEP,sEAFO,CAATV;AAIAA,eAAS,CACPW,MAAM,IAAI,IADH,EAEP,4EAFO,CAATX;AAIA,aAAOD,iBAAiB,CAACS,QAAlBT,CAA2BU,UAA3BV,CAAP;AAjCG;AAmCLc,aAAS,EAAGH,MAAD,IAA+B;AACxCV,eAAS,CACPE,KAAK,CAACE,GAANF,IAAa,OAAOA,KAAK,CAACE,GAAb,KAAqB,QAD3B,EAEP,8CAFO,CAATJ;AAIA,aAAOD,iBAAiB,CAACc,SAAlBd,CAA4B;AAAEW,cAAF;AAAUN,WAAG,EAAEF,KAAK,CAACE;AAArB,OAA5BL,CAAP;AACD;AAzCI,GAAP;AADF;;AA8CA,eAAeE,2BAAf","names":["NavigationActions","invariant","getNavigationActionCreators","route","goBack","key","actualizedKey","undefined","back","navigate","navigateTo","params","action","routeName","setParams"],"sources":["/Users/erdemoden/Desktop/React-js/blog-app/node_modules/@react-navigation/core/lib/module/routers/getNavigationActionCreators.ts"],"sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport invariant from '../utils/invariant';\n\ninterface NavigationParams {\n  [key: string]: any;\n}\n\n// TODO: Type `route`\nconst getNavigationActionCreators = (route: any) => {\n  return {\n    goBack: (key?: string | null) => {\n      let actualizedKey = key;\n      if (key === undefined && route.key) {\n        invariant(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n      return NavigationActions.back({ key: actualizedKey });\n    },\n    navigate: (\n      navigateTo: string | NavigationActions.NavigationNavigateActionPayload,\n      params?: NavigationParams,\n      action?: NavigationActions.NavigationNavigateAction\n    ) => {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params,\n          action,\n        });\n      }\n      invariant(\n        typeof navigateTo === 'object',\n        'Must navigateTo an object or a string'\n      );\n      invariant(\n        params == null,\n        'Params must not be provided to .navigate() when specifying an object'\n      );\n      invariant(\n        action == null,\n        'Child action must not be provided to .navigate() when specifying an object'\n      );\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: (params?: NavigationParams) => {\n      invariant(\n        route.key && typeof route.key === 'string',\n        'setParams cannot be called by root navigator'\n      );\n      return NavigationActions.setParams({ params, key: route.key });\n    },\n  };\n};\n\nexport default getNavigationActionCreators;\n"]},"metadata":{},"sourceType":"module"}