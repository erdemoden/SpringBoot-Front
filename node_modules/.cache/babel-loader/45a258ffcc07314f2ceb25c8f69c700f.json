{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // @ts-check\n\n\nimport * as React from 'react';\n/**\n * @typedef {object} State\n * @prop {number} index\n * @prop {({ key: string } & (State | {}))[]} routes\n * @prop {boolean} [isTransitioning]\n *\n * @typedef {object} ParentPayload\n * @prop {string} type\n * @prop {object} action\n * @prop {State} state\n * @prop {State | {key: string, routes?: undefined, index?: undefined, isTransitioning?: undefined} | undefined | null} lastState\n * @prop {string} [context]\n *\n * @typedef {object} Payload\n * @prop {string} type\n * @prop {object} action\n * @prop {State | {key: string}} state\n * @prop {State | {key: string} | undefined | null} lastState\n * @prop {string} [context]\n *\n * @typedef {object} Props\n * @prop {object} navigation\n * @prop {Function} navigation.addListener\n * @prop {Function} navigation.removeListener\n * @prop {() => boolean} navigation.isFocused\n * @prop {() => object | undefined} navigation.dangerouslyGetParent\n * @prop {State} navigation.state\n * @prop {(target: string, type: string, data: any) => void} onEvent\n *\n * @extends {React.Component<Props>}\n */\n\nexport default class NavigationEventManager extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"_actionSubscription\", void 0);\n\n    _defineProperty(this, \"_willFocusSubscription\", void 0);\n\n    _defineProperty(this, \"_willBlurSubscription\", void 0);\n\n    _defineProperty(this, \"_didFocusSubscription\", void 0);\n\n    _defineProperty(this, \"_didBlurSubscription\", void 0);\n\n    _defineProperty(this, \"_refocusSubscription\", void 0);\n\n    _defineProperty(this, \"_lastWillBlurKey\", void 0);\n\n    _defineProperty(this, \"_lastWillFocusKey\", void 0);\n\n    _defineProperty(this, \"_lastDidBlurKey\", void 0);\n\n    _defineProperty(this, \"_lastDidFocusKey\", void 0);\n\n    _defineProperty(this, \"_handleAction\", _ref => {\n      let {\n        state,\n        lastState,\n        action,\n        type,\n        context\n      } = _ref;\n\n      var _lastState$routes;\n\n      const {\n        navigation,\n        onEvent\n      } = this.props; // We should only emit events when the navigator is focused\n      // When navigator is not focused, screens inside shouldn't receive focused status either\n\n      if (!navigation.isFocused()) {\n        return;\n      }\n\n      const previous = lastState ? (_lastState$routes = lastState.routes) === null || _lastState$routes === void 0 ? void 0 : _lastState$routes[lastState.index] : undefined;\n      const current = state.routes[state.index];\n      const payload = {\n        context: \"\".concat(current.key, \":\").concat(action.type, \"_\").concat(context || 'Root'),\n        state: current,\n        lastState: previous,\n        action,\n        type\n      };\n\n      if ((previous === null || previous === void 0 ? void 0 : previous.key) !== current.key) {\n        this._emitWillFocus(current.key, payload);\n\n        if (previous === null || previous === void 0 ? void 0 : previous.key) {\n          this._emitWillBlur(previous.key, payload);\n        }\n      }\n\n      if ((lastState === null || lastState === void 0 ? void 0 : lastState.isTransitioning) !== state.isTransitioning && state.isTransitioning === false) {\n        if (this._lastWillBlurKey) {\n          this._emitDidBlur(this._lastWillBlurKey, payload);\n        }\n\n        if (this._lastWillFocusKey) {\n          this._emitDidFocus(this._lastWillFocusKey, payload);\n        }\n      }\n\n      onEvent(current.key, 'action', payload);\n    });\n\n    _defineProperty(this, \"_handleWillFocus\", _ref2 => {\n      let {\n        lastState,\n        action,\n        context,\n        type\n      } = _ref2;\n\n      var _lastState$routes2;\n\n      const {\n        navigation\n      } = this.props;\n      const route = navigation.state.routes[navigation.state.index];\n\n      this._emitWillFocus(route.key, {\n        context: \"\".concat(route.key, \":\").concat(action.type, \"_\").concat(context || 'Root'),\n        state: route,\n        lastState: lastState === null || lastState === void 0 ? void 0 : (_lastState$routes2 = lastState.routes) === null || _lastState$routes2 === void 0 ? void 0 : _lastState$routes2.find(r => r.key === route.key),\n        action,\n        type\n      });\n    });\n\n    _defineProperty(this, \"_handleWillBlur\", _ref3 => {\n      let {\n        lastState,\n        action,\n        context,\n        type\n      } = _ref3;\n\n      var _lastState$routes3;\n\n      const {\n        navigation\n      } = this.props;\n      const route = navigation.state.routes[navigation.state.index];\n\n      this._emitWillBlur(route.key, {\n        context: \"\".concat(route.key, \":\").concat(action.type, \"_\").concat(context || 'Root'),\n        state: route,\n        lastState: lastState === null || lastState === void 0 ? void 0 : (_lastState$routes3 = lastState.routes) === null || _lastState$routes3 === void 0 ? void 0 : _lastState$routes3.find(r => r.key === route.key),\n        action,\n        type\n      });\n    });\n\n    _defineProperty(this, \"_handleDidFocus\", _ref4 => {\n      let {\n        lastState,\n        action,\n        context,\n        type\n      } = _ref4;\n      const {\n        navigation\n      } = this.props;\n\n      if (this._lastWillFocusKey) {\n        const route = navigation.state.routes.find(r => r.key === this._lastWillFocusKey);\n\n        if (route) {\n          var _lastState$routes4;\n\n          this._emitDidFocus(route.key, {\n            context: \"\".concat(route.key, \":\").concat(action.type, \"_\").concat(context || 'Root'),\n            state: route,\n            lastState: lastState === null || lastState === void 0 ? void 0 : (_lastState$routes4 = lastState.routes) === null || _lastState$routes4 === void 0 ? void 0 : _lastState$routes4.find(r => r.key === route.key),\n            action,\n            type\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"_handleDidBlur\", _ref5 => {\n      let {\n        lastState,\n        action,\n        context,\n        type\n      } = _ref5;\n      const {\n        navigation\n      } = this.props;\n\n      if (this._lastWillBlurKey) {\n        const route = navigation.state.routes.find(r => r.key === this._lastWillBlurKey);\n\n        if (route) {\n          var _lastState$routes5;\n\n          this._emitDidBlur(route.key, {\n            context: \"\".concat(route.key, \":\").concat(action.type, \"_\").concat(context || 'Root'),\n            state: route,\n            lastState: lastState === null || lastState === void 0 ? void 0 : (_lastState$routes5 = lastState.routes) === null || _lastState$routes5 === void 0 ? void 0 : _lastState$routes5.find(r => r.key === route.key),\n            action,\n            type\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"_handleRefocus\", () => {\n      const {\n        onEvent,\n        navigation\n      } = this.props;\n      const route = navigation.state.routes[navigation.state.index];\n      onEvent(route.key, 'refocus');\n    });\n\n    _defineProperty(this, \"_emitWillFocus\", (target, payload) => {\n      if (this._lastWillBlurKey === target) {\n        this._lastWillBlurKey = undefined;\n      }\n\n      if (this._lastWillFocusKey === target) {\n        return;\n      }\n\n      this._lastDidFocusKey = undefined;\n      this._lastWillFocusKey = target;\n      const {\n        navigation,\n        onEvent\n      } = this.props;\n      onEvent(target, 'willFocus', payload);\n\n      if (typeof navigation.state.isTransitioning !== 'boolean' || navigation.state.isTransitioning !== true && !navigation.dangerouslyGetParent()) {\n        this._emitDidFocus(target, payload);\n      }\n    });\n\n    _defineProperty(this, \"_emitWillBlur\", (target, payload) => {\n      if (this._lastWillFocusKey === target) {\n        this._lastWillFocusKey = undefined;\n      }\n\n      if (this._lastWillBlurKey === target) {\n        return;\n      }\n\n      this._lastDidBlurKey = undefined;\n      this._lastWillBlurKey = target;\n      const {\n        navigation,\n        onEvent\n      } = this.props;\n      onEvent(target, 'willBlur', payload);\n\n      if (typeof navigation.state.isTransitioning !== 'boolean' || navigation.state.isTransitioning !== true && !navigation.dangerouslyGetParent()) {\n        this._emitDidBlur(target, payload);\n      }\n    });\n\n    _defineProperty(this, \"_emitDidFocus\", (target, payload) => {\n      if (this._lastWillFocusKey !== target || this._lastDidFocusKey === target) {\n        return;\n      }\n\n      this._lastDidFocusKey = target;\n      const {\n        onEvent\n      } = this.props;\n      onEvent(target, 'didFocus', payload);\n    });\n\n    _defineProperty(this, \"_emitDidBlur\", (target, payload) => {\n      if (this._lastWillBlurKey !== target || this._lastDidBlurKey === target) {\n        return;\n      }\n\n      this._lastDidBlurKey = target;\n      const {\n        onEvent\n      } = this.props;\n      onEvent(target, 'didBlur', payload);\n    });\n  }\n\n  componentDidMount() {\n    const {\n      navigation\n    } = this.props;\n    this._actionSubscription = navigation.addListener('action', this._handleAction);\n    this._willFocusSubscription = navigation.addListener('willFocus', this._handleWillFocus);\n    this._willBlurSubscription = navigation.addListener('willBlur', this._handleWillBlur);\n    this._didFocusSubscription = navigation.addListener('didFocus', this._handleDidFocus);\n    this._didBlurSubscription = navigation.addListener('didBlur', this._handleDidBlur);\n    this._refocusSubscription = navigation.addListener('refocus', this._handleRefocus);\n  }\n\n  componentWillUnmount() {\n    var _this$_actionSubscrip, _this$_willFocusSubsc, _this$_willBlurSubscr, _this$_didFocusSubscr, _this$_didBlurSubscri, _this$_refocusSubscri;\n\n    (_this$_actionSubscrip = this._actionSubscription) === null || _this$_actionSubscrip === void 0 ? void 0 : _this$_actionSubscrip.remove();\n    (_this$_willFocusSubsc = this._willFocusSubscription) === null || _this$_willFocusSubsc === void 0 ? void 0 : _this$_willFocusSubsc.remove();\n    (_this$_willBlurSubscr = this._willBlurSubscription) === null || _this$_willBlurSubscr === void 0 ? void 0 : _this$_willBlurSubscr.remove();\n    (_this$_didFocusSubscr = this._didFocusSubscription) === null || _this$_didFocusSubscr === void 0 ? void 0 : _this$_didFocusSubscr.remove();\n    (_this$_didBlurSubscri = this._didBlurSubscription) === null || _this$_didBlurSubscri === void 0 ? void 0 : _this$_didBlurSubscri.remove();\n    (_this$_refocusSubscri = this._refocusSubscription) === null || _this$_refocusSubscri === void 0 ? void 0 : _this$_refocusSubscri.remove();\n  }\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n\n\n  render() {\n    return null;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["React","NavigationEventManager","Component","constructor","_defineProperty","state","lastState","action","type","context","navigation","onEvent","props","isFocused","previous","routes","_lastState$routes","index","undefined","current","payload","key","_emitWillFocus","_emitWillBlur","isTransitioning","_lastWillBlurKey","_emitDidBlur","_lastWillFocusKey","_emitDidFocus","route","_lastState$routes2","find","r","_lastState$routes3","_lastState$routes4","_lastState$routes5","target","_lastDidFocusKey","dangerouslyGetParent","_lastDidBlurKey","componentDidMount","_actionSubscription","addListener","_handleAction","_willFocusSubscription","_handleWillFocus","_willBlurSubscription","_handleWillBlur","_didFocusSubscription","_handleDidFocus","_didBlurSubscription","_handleDidBlur","_refocusSubscription","_handleRefocus","componentWillUnmount","remove","render"],"sources":["/Users/erdemoden/Desktop/React-js/blog-app/node_modules/@react-navigation/core/lib/module/views/NavigationFocusEvents.js"],"sourcesContent":["// @ts-check\n\nimport * as React from 'react';\n\n/**\n * @typedef {object} State\n * @prop {number} index\n * @prop {({ key: string } & (State | {}))[]} routes\n * @prop {boolean} [isTransitioning]\n *\n * @typedef {object} ParentPayload\n * @prop {string} type\n * @prop {object} action\n * @prop {State} state\n * @prop {State | {key: string, routes?: undefined, index?: undefined, isTransitioning?: undefined} | undefined | null} lastState\n * @prop {string} [context]\n *\n * @typedef {object} Payload\n * @prop {string} type\n * @prop {object} action\n * @prop {State | {key: string}} state\n * @prop {State | {key: string} | undefined | null} lastState\n * @prop {string} [context]\n *\n * @typedef {object} Props\n * @prop {object} navigation\n * @prop {Function} navigation.addListener\n * @prop {Function} navigation.removeListener\n * @prop {() => boolean} navigation.isFocused\n * @prop {() => object | undefined} navigation.dangerouslyGetParent\n * @prop {State} navigation.state\n * @prop {(target: string, type: string, data: any) => void} onEvent\n *\n * @extends {React.Component<Props>}\n */\nexport default class NavigationEventManager extends React.Component {\n  componentDidMount() {\n    const { navigation } = this.props;\n\n    this._actionSubscription = navigation.addListener(\n      'action',\n      this._handleAction\n    );\n\n    this._willFocusSubscription = navigation.addListener(\n      'willFocus',\n      this._handleWillFocus\n    );\n\n    this._willBlurSubscription = navigation.addListener(\n      'willBlur',\n      this._handleWillBlur\n    );\n\n    this._didFocusSubscription = navigation.addListener(\n      'didFocus',\n      this._handleDidFocus\n    );\n\n    this._didBlurSubscription = navigation.addListener(\n      'didBlur',\n      this._handleDidBlur\n    );\n\n    this._refocusSubscription = navigation.addListener(\n      'refocus',\n      this._handleRefocus\n    );\n  }\n\n  componentWillUnmount() {\n    this._actionSubscription?.remove();\n    this._willFocusSubscription?.remove();\n    this._willBlurSubscription?.remove();\n    this._didFocusSubscription?.remove();\n    this._didBlurSubscription?.remove();\n    this._refocusSubscription?.remove();\n  }\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _actionSubscription;\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _willFocusSubscription;\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _willBlurSubscription;\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _didFocusSubscription;\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _didBlurSubscription;\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _refocusSubscription;\n\n  /**\n   * @type {string | undefined}\n   */\n  _lastWillBlurKey;\n\n  /**\n   * @type {string | undefined}\n   */\n  _lastWillFocusKey;\n\n  /**\n   * @type {string | undefined}\n   */\n  _lastDidBlurKey;\n\n  /**\n   * @type {string | undefined}\n   */\n  _lastDidFocusKey;\n\n  /**\n   * The 'action' event will fire when navigation state changes.\n   * Detect if the focused route changed here and emit appropriate events.\n   *\n   * @param {ParentPayload} payload\n   */\n  _handleAction = ({ state, lastState, action, type, context }) => {\n    const { navigation, onEvent } = this.props;\n\n    // We should only emit events when the navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (!navigation.isFocused()) {\n      return;\n    }\n\n    const previous = lastState\n      ? lastState.routes?.[lastState.index]\n      : undefined;\n    const current = state.routes[state.index];\n\n    const payload = {\n      context: `${current.key}:${action.type}_${context || 'Root'}`,\n      state: current,\n      lastState: previous,\n      action,\n      type,\n    };\n\n    if (previous?.key !== current.key) {\n      this._emitWillFocus(current.key, payload);\n\n      if (previous?.key) {\n        this._emitWillBlur(previous.key, payload);\n      }\n    }\n\n    if (\n      lastState?.isTransitioning !== state.isTransitioning &&\n      state.isTransitioning === false\n    ) {\n      if (this._lastWillBlurKey) {\n        this._emitDidBlur(this._lastWillBlurKey, payload);\n      }\n\n      if (this._lastWillFocusKey) {\n        this._emitDidFocus(this._lastWillFocusKey, payload);\n      }\n    }\n\n    onEvent(current.key, 'action', payload);\n  };\n\n  /**\n   * @param {ParentPayload} payload\n   */\n  _handleWillFocus = ({ lastState, action, context, type }) => {\n    const { navigation } = this.props;\n    const route = navigation.state.routes[navigation.state.index];\n\n    this._emitWillFocus(route.key, {\n      context: `${route.key}:${action.type}_${context || 'Root'}`,\n      state: route,\n      lastState: lastState?.routes?.find((r) => r.key === route.key),\n      action,\n      type,\n    });\n  };\n\n  /**\n   * @param {ParentPayload} payload\n   */\n  _handleWillBlur = ({ lastState, action, context, type }) => {\n    const { navigation } = this.props;\n    const route = navigation.state.routes[navigation.state.index];\n\n    this._emitWillBlur(route.key, {\n      context: `${route.key}:${action.type}_${context || 'Root'}`,\n      state: route,\n      lastState: lastState?.routes?.find((r) => r.key === route.key),\n      action,\n      type,\n    });\n  };\n\n  /**\n   * @param {ParentPayload} payload\n   */\n  _handleDidFocus = ({ lastState, action, context, type }) => {\n    const { navigation } = this.props;\n\n    if (this._lastWillFocusKey) {\n      const route = navigation.state.routes.find(\n        (r) => r.key === this._lastWillFocusKey\n      );\n\n      if (route) {\n        this._emitDidFocus(route.key, {\n          context: `${route.key}:${action.type}_${context || 'Root'}`,\n          state: route,\n          lastState: lastState?.routes?.find((r) => r.key === route.key),\n          action,\n          type,\n        });\n      }\n    }\n  };\n\n  /**\n   * @param {ParentPayload} payload\n   */\n  _handleDidBlur = ({ lastState, action, context, type }) => {\n    const { navigation } = this.props;\n\n    if (this._lastWillBlurKey) {\n      const route = navigation.state.routes.find(\n        (r) => r.key === this._lastWillBlurKey\n      );\n\n      if (route) {\n        this._emitDidBlur(route.key, {\n          context: `${route.key}:${action.type}_${context || 'Root'}`,\n          state: route,\n          lastState: lastState?.routes?.find((r) => r.key === route.key),\n          action,\n          type,\n        });\n      }\n    }\n  };\n\n  _handleRefocus = () => {\n    const { onEvent, navigation } = this.props;\n    const route = navigation.state.routes[navigation.state.index];\n\n    onEvent(route.key, 'refocus');\n  };\n\n  /**\n   * @param {string} target\n   * @param {Payload} payload\n   */\n  _emitWillFocus = (target, payload) => {\n    if (this._lastWillBlurKey === target) {\n      this._lastWillBlurKey = undefined;\n    }\n\n    if (this._lastWillFocusKey === target) {\n      return;\n    }\n\n    this._lastDidFocusKey = undefined;\n    this._lastWillFocusKey = target;\n\n    const { navigation, onEvent } = this.props;\n\n    onEvent(target, 'willFocus', payload);\n\n    if (\n      typeof navigation.state.isTransitioning !== 'boolean' ||\n      (navigation.state.isTransitioning !== true &&\n        !navigation.dangerouslyGetParent())\n    ) {\n      this._emitDidFocus(target, payload);\n    }\n  };\n\n  /**\n   * @param {string} target\n   * @param {Payload} payload\n   */\n  _emitWillBlur = (target, payload) => {\n    if (this._lastWillFocusKey === target) {\n      this._lastWillFocusKey = undefined;\n    }\n\n    if (this._lastWillBlurKey === target) {\n      return;\n    }\n\n    this._lastDidBlurKey = undefined;\n    this._lastWillBlurKey = target;\n\n    const { navigation, onEvent } = this.props;\n\n    onEvent(target, 'willBlur', payload);\n\n    if (\n      typeof navigation.state.isTransitioning !== 'boolean' ||\n      (navigation.state.isTransitioning !== true &&\n        !navigation.dangerouslyGetParent())\n    ) {\n      this._emitDidBlur(target, payload);\n    }\n  };\n\n  /**\n   * @param {string} target\n   * @param {Payload} payload\n   */\n  _emitDidFocus = (target, payload) => {\n    if (this._lastWillFocusKey !== target || this._lastDidFocusKey === target) {\n      return;\n    }\n\n    this._lastDidFocusKey = target;\n\n    const { onEvent } = this.props;\n\n    onEvent(target, 'didFocus', payload);\n  };\n\n  /**\n   * @param {string} target\n   * @param {Payload} payload\n   */\n  _emitDidBlur = (target, payload) => {\n    if (this._lastWillBlurKey !== target || this._lastDidBlurKey === target) {\n      return;\n    }\n\n    this._lastDidBlurKey = target;\n\n    const { onEvent } = this.props;\n\n    onEvent(target, 'didBlur', payload);\n  };\n\n  render() {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}