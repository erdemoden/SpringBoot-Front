{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\nexport default ((Navigator, navigatorConfig) => {\n  var _class, _temp;\n\n  return _temp = _class = class KeyboardAwareNavigator extends React.Component {\n    constructor() {\n      super(...arguments);\n\n      _defineProperty(this, \"_previouslyFocusedTextInput\", null);\n\n      _defineProperty(this, \"_handleGestureBegin\", () => {\n        this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedInput ? TextInput.State.currentlyFocusedInput() : TextInput.State.currentlyFocusedField();\n\n        if (this._previouslyFocusedTextInput) {\n          TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n        }\n\n        this.props.onGestureBegin && this.props.onGestureBegin();\n      });\n\n      _defineProperty(this, \"_handleGestureCanceled\", () => {\n        if (this._previouslyFocusedTextInput) {\n          TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n        }\n\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n      });\n\n      _defineProperty(this, \"_handleGestureEnd\", () => {\n        this._previouslyFocusedTextInput = null;\n        this.props.onGestureFinish && this.props.onGestureFinish();\n      });\n\n      _defineProperty(this, \"_handleTransitionStart\", (transitionProps, prevTransitionProps) => {\n        // TODO: We should not even have received the transition start event\n        // in the case where the index did not change, I believe. We\n        // should revisit this after 2.0 release.\n        if (transitionProps.index !== prevTransitionProps.index) {\n          const currentField = TextInput.State.currentlyFocusedInput ? TextInput.State.currentlyFocusedInput() : TextInput.State.currentlyFocusedField();\n\n          if (currentField) {\n            TextInput.State.blurTextInput(currentField);\n          }\n        }\n\n        const onTransitionStart = this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n        onTransitionStart && onTransitionStart(transitionProps, prevTransitionProps);\n      });\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(Navigator, _extends({}, this.props, {\n        onGestureBegin: this._handleGestureBegin,\n        onGestureCanceled: this._handleGestureCanceled,\n        onGestureEnd: this._handleGestureEnd,\n        onTransitionStart: this._handleTransitionStart\n      }));\n    }\n\n  }, _defineProperty(_class, \"router\", Navigator.router), _defineProperty(_class, \"navigationOptions\", Navigator.navigationOptions), _temp;\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,gBAAe,CAACC,SAAD,EAAYC,eAAZ;AAAA;;AAAA,0BACb,MAAMC,sBAAN,SAAqCJ,KAAK,CAACK,SAA3C,CAAqD;AAAAC;AAAA;;AAAAC,2DAGrB,IAHqB;;AAAAA,mDAK7B,MAAM;AAC1B,aAAKC,2BAAL,GAAmCP,SAAS,CAACQ,KAAVR,CAAgBS,qBAAhBT,GAC/BA,SAAS,CAACQ,KAAVR,CAAgBS,qBAAhBT,EAD+BA,GAE/BA,SAAS,CAACQ,KAAVR,CAAgBU,qBAAhBV,EAFJ;;AAGA,YAAI,KAAKO,2BAAT,EAAsC;AACpCP,mBAAS,CAACQ,KAAVR,CAAgBW,aAAhBX,CAA8B,KAAKO,2BAAnCP;AACD;;AACD,aAAKY,KAAL,CAAWC,cAAX,IAA6B,KAAKD,KAAL,CAAWC,cAAX,EAA7B;AAZiD;;AAAAP,sDAe1B,MAAM;AAC7B,YAAI,KAAKC,2BAAT,EAAsC;AACpCP,mBAAS,CAACQ,KAAVR,CAAgBc,cAAhBd,CAA+B,KAAKO,2BAApCP;AACD;;AACD,aAAKY,KAAL,CAAWG,iBAAX,IAAgC,KAAKH,KAAL,CAAWG,iBAAX,EAAhC;AAnBiD;;AAAAT,iDAsB/B,MAAM;AACxB,aAAKC,2BAAL,GAAmC,IAAnC;AACA,aAAKK,KAAL,CAAWI,eAAX,IAA8B,KAAKJ,KAAL,CAAWI,eAAX,EAA9B;AAxBiD;;AAAAV,sDA2B1B,CAACW,eAAD,EAAkBC,mBAAlB,KAA0C;AACjE;AACA;AACA;AACA,YAAID,eAAe,CAACE,KAAhBF,KAA0BC,mBAAmB,CAACC,KAAlD,EAAyD;AACvD,gBAAMC,YAAY,GAAGpB,SAAS,CAACQ,KAAVR,CAAgBS,qBAAhBT,GACjBA,SAAS,CAACQ,KAAVR,CAAgBS,qBAAhBT,EADiBA,GAEjBA,SAAS,CAACQ,KAAVR,CAAgBU,qBAAhBV,EAFJ;;AAGA,cAAIoB,YAAJ,EAAkB;AAChBpB,qBAAS,CAACQ,KAAVR,CAAgBW,aAAhBX,CAA8BoB,YAA9BpB;AACD;AACF;;AAED,cAAMqB,iBAAiB,GACrB,KAAKT,KAAL,CAAWS,iBAAX,IAAgCnB,eAAe,CAACmB,iBADlD;AAEAA,yBAAiB,IACfA,iBAAiB,CAACJ,eAAD,EAAkBC,mBAAlB,CADnBG;AA1CiD;AAAA;;AA8CnDC,UAAM,GAAG;AACP,0BACEvB,oBAACE,SAAD,eACM,KAAKW,KADX;AAEEC,sBAAc,EAAE,KAAKU,mBAFvB;AAGER,yBAAiB,EAAE,KAAKS,sBAH1B;AAIEC,oBAAY,EAAE,KAAKC,iBAJrB;AAKEL,yBAAiB,EAAE,KAAKM;AAL1B,SADF;AASD;;AAxDkD,GADxC,oCAEK1B,SAAS,CAAC2B,MAFf,gDAGgB3B,SAAS,CAAC4B,iBAH1B;AAAf","names":["React","TextInput","Navigator","navigatorConfig","KeyboardAwareNavigator","Component","constructor","_defineProperty","_previouslyFocusedTextInput","State","currentlyFocusedInput","currentlyFocusedField","blurTextInput","props","onGestureBegin","focusTextInput","onGestureCanceled","onGestureFinish","transitionProps","prevTransitionProps","index","currentField","onTransitionStart","render","_handleGestureBegin","_handleGestureCanceled","onGestureEnd","_handleGestureEnd","_handleTransitionStart","router","navigationOptions"],"sources":["/Users/erdemoden/Desktop/React-js/blog-app/node_modules/@react-navigation/native/lib/module/createKeyboardAwareNavigator.js"],"sourcesContent":["import * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default (Navigator, navigatorConfig) =>\n  class KeyboardAwareNavigator extends React.Component {\n    static router = Navigator.router;\n    static navigationOptions = Navigator.navigationOptions;\n    _previouslyFocusedTextInput = null;\n\n    _handleGestureBegin = () => {\n      this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedInput\n        ? TextInput.State.currentlyFocusedInput()\n        : TextInput.State.currentlyFocusedField();\n      if (this._previouslyFocusedTextInput) {\n        TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n      }\n      this.props.onGestureBegin && this.props.onGestureBegin();\n    };\n\n    _handleGestureCanceled = () => {\n      if (this._previouslyFocusedTextInput) {\n        TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n      }\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n    };\n\n    _handleGestureEnd = () => {\n      this._previouslyFocusedTextInput = null;\n      this.props.onGestureFinish && this.props.onGestureFinish();\n    };\n\n    _handleTransitionStart = (transitionProps, prevTransitionProps) => {\n      // TODO: We should not even have received the transition start event\n      // in the case where the index did not change, I believe. We\n      // should revisit this after 2.0 release.\n      if (transitionProps.index !== prevTransitionProps.index) {\n        const currentField = TextInput.State.currentlyFocusedInput\n          ? TextInput.State.currentlyFocusedInput()\n          : TextInput.State.currentlyFocusedField();\n        if (currentField) {\n          TextInput.State.blurTextInput(currentField);\n        }\n      }\n\n      const onTransitionStart =\n        this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n      onTransitionStart &&\n        onTransitionStart(transitionProps, prevTransitionProps);\n    };\n\n    render() {\n      return (\n        <Navigator\n          {...this.props}\n          onGestureBegin={this._handleGestureBegin}\n          onGestureCanceled={this._handleGestureCanceled}\n          onGestureEnd={this._handleGestureEnd}\n          onTransitionStart={this._handleTransitionStart}\n        />\n      );\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}