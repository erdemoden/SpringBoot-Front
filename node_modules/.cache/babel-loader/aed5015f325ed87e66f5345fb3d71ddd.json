{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* eslint-disable react/sort-comp */\n\n\nimport * as React from 'react';\nimport { Linking, Platform, BackHandler } from 'react-native';\nimport { NavigationActions, ThemeProvider, pathUtils, getNavigation, NavigationProvider } from '@react-navigation/core';\nimport invariant from './utils/invariant';\nimport docsUrl from './utils/docsUrl';\nconst {\n  urlToPathAndParams\n} = pathUtils;\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn('You passed persistenceKey prop to a navigator. ' + 'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' + 'please see the navigation state persistence docs for more information. ' + 'Passing the persistenceKey prop is a no-op.');\n  }\n\n  if (isStateful(props)) {\n    return;\n  }\n  /* eslint-disable no-unused-vars */\n\n\n  const {\n    navigation,\n    screenProps,\n    persistNavigationState,\n    loadNavigationState,\n    theme,\n    ...containerProps\n  } = props;\n  /* eslint-enable no-unused-vars */\n\n  const keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error('This navigator has both navigation and container props, so it is ' + \"unclear if it should own its own state. Remove props: \\\"\".concat(keys.join(', '), \"\\\" \") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n  }\n\n  invariant(persistNavigationState === undefined && loadNavigationState === undefined || typeof persistNavigationState === 'function' && typeof loadNavigationState === 'function', 'both persistNavigationState and loadNavigationState must either be undefined, or be functions');\n} // Track the number of stateful container instances. Warn if >0 and not using the\n// detached prop to explicitly acknowledge the behavior. We should deprecated implicit\n// stateful navigation containers in a future release and require a provider style pattern\n// instead in order to eliminate confusion entirely.\n\n\nlet _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n} // We keep a global flag to catch errors during the state persistence hydrating scenario.\n// The innermost navigator who catches the error will dispatch a new init action.\n\nlet _reactNavigationIsHydratingState = false; // Unfortunate to use global state here, but it seems necessesary for the time\n// being. There seems to be some problems with cascading componentDidCatch\n// handlers. Ideally the inner non-stateful navigator catches the error and\n// re-throws it, to be caught by the top-level stateful navigator.\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\n\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    static getDerivedStateFromProps(nextProps) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    constructor(props) {\n      super(props);\n\n      _defineProperty(this, \"subs\", null);\n\n      _defineProperty(this, \"_actionEventSubscribers\", new Set());\n\n      _defineProperty(this, \"_handleOpenURL\", _ref => {\n        let {\n          url\n        } = _ref;\n        const {\n          enableURLHandling,\n          uriPrefix\n        } = this.props;\n\n        if (enableURLHandling === false) {\n          return;\n        }\n\n        const parsedUrl = urlToPathAndParams(url, uriPrefix);\n\n        if (parsedUrl) {\n          const {\n            path,\n            params\n          } = parsedUrl;\n          const action = Component.router.getActionForPathAndParams(path, params);\n\n          if (action) {\n            this.dispatch(action);\n          }\n        }\n      });\n\n      _defineProperty(this, \"_persistNavigationState\", async nav => {\n        const {\n          persistNavigationState\n        } = this.props;\n\n        if (persistNavigationState) {\n          try {\n            await persistNavigationState(nav);\n          } catch (err) {\n            console.warn('Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.');\n          }\n        }\n      });\n\n      _defineProperty(this, \"dispatch\", action => {\n        if (this.props.navigation) {\n          return this.props.navigation.dispatch(action);\n        } // navState will have the most up-to-date value, because setState sometimes behaves asyncronously\n\n\n        this._navState = this._navState || this.state.nav;\n        const lastNavState = this._navState;\n        invariant(lastNavState, 'should be set in constructor if stateful');\n        const reducedState = Component.router.getStateForAction(action, lastNavState);\n        const navState = reducedState === null ? lastNavState : reducedState;\n\n        const dispatchActionEvents = () => {\n          this._actionEventSubscribers.forEach(subscriber => subscriber({\n            type: 'action',\n            action,\n            state: navState,\n            lastState: lastNavState\n          }));\n        };\n\n        if (reducedState === null) {\n          // The router will return null when action has been handled and the state hasn't changed.\n          // dispatch returns true when something has been handled.\n          dispatchActionEvents();\n          return true;\n        }\n\n        if (navState !== lastNavState) {\n          // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n          this._navState = navState;\n          this.setState({\n            nav: navState\n          }, () => {\n            this._onNavigationStateChange(lastNavState, navState, action);\n\n            dispatchActionEvents();\n\n            this._persistNavigationState(navState);\n          });\n          return true;\n        }\n\n        dispatchActionEvents();\n        return false;\n      });\n\n      _defineProperty(this, \"_getScreenProps\", () => this.props.screenProps);\n\n      _defineProperty(this, \"_getTheme\", () => {\n        if (this.props.theme === 'light' || this.props.theme === 'dark') {\n          return this.props.theme;\n        } else if (this.props.theme === 'no-preference') {\n          return 'light';\n        } else {\n          console.warn(\"Invalid theme provided: \".concat(this.props.theme, \". Only 'light' and 'dark' are supported. Falling back to 'light'\"));\n          return 'light';\n        }\n      });\n\n      validateProps(props);\n      this._initialAction = NavigationActions.init();\n\n      if (this._isStateful() && BackHandler && typeof BackHandler.addEventListener === 'function') {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav: this._isStateful() && !props.loadNavigationState ? Component.router.getStateForAction(this._initialAction) : null\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav\n          });\n        }\n\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      // Clear cached _navState every tick\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    async componentDidMount() {\n      this._isMounted = true;\n\n      if (!this._isStateful()) {\n        return;\n      }\n\n      if (process.env.NODE_ENV !== 'production' && !this.props.detached) {\n        if (_statefulContainerCount > 0) {\n          // Temporarily only show this on iOS due to this issue:\n          // https://github.com/react-navigation/react-navigation/issues/4196#issuecomment-390827829\n          if (Platform.OS === 'ios') {\n            console.warn(\"You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: \".concat(docsUrl('common-mistakes.html#explicitly-rendering-more-than-one-navigator')));\n          }\n        }\n      }\n\n      _statefulContainerCount++;\n      this._linkingSub = Linking.addEventListener('url', this._handleOpenURL); // Pull out anything that can impact state\n\n      let parsedUrl = null;\n      let userProvidedStartupState = null;\n\n      if (this.props.enableURLHandling !== false) {\n        ({\n          parsedUrl,\n          userProvidedStartupState\n        } = await this.getStartupParams());\n      } // Initialize state. This must be done *after* any async code\n      // so we don't end up with a different value for this.state.nav\n      // due to changes while async function was resolving\n\n\n      let action = this._initialAction; // eslint-disable-next-line react/no-access-state-in-setstate\n\n      let startupState = this.state.nav;\n\n      if (!startupState && !userProvidedStartupState) {\n        !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');\n        startupState = Component.router.getStateForAction(action);\n      } // Pull user-provided persisted state\n\n\n      if (userProvidedStartupState) {\n        startupState = userProvidedStartupState;\n        _reactNavigationIsHydratingState = true;\n      } // Pull state out of URL\n\n\n      if (parsedUrl) {\n        const {\n          path,\n          params\n        } = parsedUrl;\n        const urlAction = Component.router.getActionForPathAndParams(path, params);\n\n        if (urlAction) {\n          !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', parsedUrl);\n          action = urlAction;\n          startupState = Component.router.getStateForAction(urlAction, startupState);\n        }\n      }\n\n      const dispatchActions = () => this._actionEventSubscribers.forEach(subscriber => subscriber({\n        type: 'action',\n        action,\n        state: this.state.nav,\n        lastState: null\n      }));\n\n      if (startupState === this.state.nav) {\n        dispatchActions();\n        return;\n      } // eslint-disable-next-line react/no-did-mount-set-state\n\n\n      this.setState({\n        nav: startupState\n      }, () => {\n        _reactNavigationIsHydratingState = false;\n        dispatchActions();\n      });\n    }\n\n    async getStartupParams() {\n      const {\n        uriPrefix,\n        loadNavigationState\n      } = this.props;\n      let url, loadedNavState;\n\n      try {\n        [url, loadedNavState] = await Promise.all([Linking.getInitialURL(), loadNavigationState && loadNavigationState()]);\n      } catch (err) {// ignore\n      }\n\n      return {\n        parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n        userProvidedStartupState: loadedNavState\n      };\n    }\n\n    componentDidCatch(e) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...');\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    componentWillUnmount() {\n      var _this$_linkingSub;\n\n      this._isMounted = false; // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n\n      if ((_this$_linkingSub = this._linkingSub) === null || _this$_linkingSub === void 0 ? void 0 : _this$_linkingSub.remove) {\n        var _this$_linkingSub2;\n\n        (_this$_linkingSub2 = this._linkingSub) === null || _this$_linkingSub2 === void 0 ? void 0 : _this$_linkingSub2.remove();\n      } else {\n        Linking.removeEventListener('url', this._handleOpenURL);\n      }\n\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    } // Per-tick temporary storage for state.nav\n\n\n    render() {\n      let navigation = this.props.navigation;\n\n      if (this._isStateful()) {\n        const navState = this.state.nav;\n\n        if (!navState) {\n          return this._renderLoading();\n        }\n\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, () => this._navigation);\n        }\n\n        navigation = this._navigation;\n      }\n\n      invariant(navigation, 'failed to get navigation');\n      return /*#__PURE__*/React.createElement(ThemeProvider, {\n        value: this._getTheme()\n      }, /*#__PURE__*/React.createElement(NavigationProvider, {\n        value: navigation\n      }, /*#__PURE__*/React.createElement(Component, _extends({}, this.props, {\n        navigation: navigation\n      }))));\n    }\n\n  }\n\n  _defineProperty(NavigationContainer, \"router\", Component.router);\n\n  _defineProperty(NavigationContainer, \"navigationOptions\", null);\n\n  _defineProperty(NavigationContainer, \"defaultProps\", {\n    theme: 'light'\n  });\n\n  return NavigationContainer;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,WAA5B,QAA+C,cAA/C;AACA,SACEC,iBADF,EAEEC,aAFF,EAGEC,SAHF,EAIEC,aAJF,EAKEC,kBALF,QAMO,wBANP;AAOA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AAEA,MAAM;AAAEC;AAAF,IAAyBL,SAA/B;;AAEA,SAASM,UAAT,CAAoBC,KAApB,EAA2B;AACzB,SAAO,CAACA,KAAK,CAACC,UAAd;AACD;;AAED,SAASC,aAAT,CAAuBF,KAAvB,EAA8B;AAC5B,MAAIA,KAAK,CAACG,cAAV,EAA0B;AACxBC,WAAO,CAACC,IAARD,CACE,oDACE,iFADF,GAEE,yEAFF,GAGE,6CAJJA;AAMD;;AACD,MAAIL,UAAU,CAACC,KAAD,CAAd,EAAuB;AACrB;AACD;AACD;;;AACA,QAAM;AACJC,cADI;AAEJK,eAFI;AAGJC,0BAHI;AAIJC,uBAJI;AAKJC,SALI;AAMJ,OAAGC;AANC,MAOFV,KAPJ;AAQA;;AAEA,QAAMW,IAAI,GAAGC,MAAM,CAACD,IAAPC,CAAYF,cAAZE,CAAb;;AAEA,MAAID,IAAI,CAACE,MAALF,KAAgB,CAApB,EAAuB;AACrB,UAAM,IAAIG,KAAJ,CACJ,wIAC4DH,IAAI,CAACI,IAALJ,CACxD,IADwDA,CAD5D,WAIE,yEAJF,GAKE,yEANE,CAAN;AAQD;;AACDf,WAAS,CACNW,sBAAsB,KAAKS,SAA3BT,IACCC,mBAAmB,KAAKQ,SADzBT,IAEE,OAAOA,sBAAP,KAAkC,UAAlC,IACC,OAAOC,mBAAP,KAA+B,UAJ5B,EAKP,+FALO,CAATZ;EASF;AACA;AACA;AACA;;;AACA,IAAIqB,uBAAuB,GAAG,CAA9B;AACA,OAAO,SAASC,mCAAT,GAA+C;AACpDD,yBAAuB,GAAG,CAA1BA;EAGF;AACA;;AACA,IAAIE,gCAAgC,GAAG,KAAvC,C,CACA;AACA;AACA;AACA;;AAEA;;;;;;;AAMA,eAAe,SAASC,yBAAT,CAAmCC,SAAnC,EAA8C;AAC3D,QAAMC,mBAAN,SAAkCnC,KAAK,CAACkC,SAAxC,CAAkD;AAUhD,WAAOE,wBAAP,CAAgCC,SAAhC,EAA2C;AACzCtB,mBAAa,CAACsB,SAAD,CAAbtB;AACA,aAAO,IAAP;AACD;;AAIDuB,eAAW,CAACzB,KAAD,EAAQ;AACjB,YAAMA,KAAN;;AADiB0B,oCAhBZ,IAgBY;;AAAAA,uDAFO,IAAIC,GAAJ,EAEP;;AAAAD,8CA0CF,QAAa;AAAA,YAAZ;AAAEE;AAAF,SAAY;AAC5B,cAAM;AAAEC,2BAAF;AAAqBC;AAArB,YAAmC,KAAK9B,KAA9C;;AACA,YAAI6B,iBAAiB,KAAK,KAA1B,EAAiC;AAC/B;AACD;;AACD,cAAME,SAAS,GAAGjC,kBAAkB,CAAC8B,GAAD,EAAME,SAAN,CAApC;;AACA,YAAIC,SAAJ,EAAe;AACb,gBAAM;AAAEC,gBAAF;AAAQC;AAAR,cAAmBF,SAAzB;AACA,gBAAMG,MAAM,GAAGb,SAAS,CAACc,MAAVd,CAAiBe,yBAAjBf,CAA2CW,IAA3CX,EAAiDY,MAAjDZ,CAAf;;AACA,cAAIa,MAAJ,EAAY;AACV,iBAAKG,QAAL,CAAcH,MAAd;AACD;AACF;AAtDgB;;AAAAR,uDAqNO,MAAOY,GAAP,IAAe;AACvC,cAAM;AAAE/B;AAAF,YAA6B,KAAKP,KAAxC;;AACA,YAAIO,sBAAJ,EAA4B;AAC1B,cAAI;AACF,kBAAMA,sBAAsB,CAAC+B,GAAD,CAA5B;AADF,YAEE,OAAOC,GAAP,EAAY;AACZnC,mBAAO,CAACC,IAARD,CACE,+KADFA;AAGD;AACF;AA/NgB;;AAAAsB,wCAqPPQ,MAAD,IAAY;AACrB,YAAI,KAAKlC,KAAL,CAAWC,UAAf,EAA2B;AACzB,iBAAO,KAAKD,KAAL,CAAWC,UAAX,CAAsBoC,QAAtB,CAA+BH,MAA/B,CAAP;AAFmB,UAKrB;;;AACA,aAAKM,SAAL,GAAiB,KAAKA,SAAL,IAAkB,KAAKC,KAAL,CAAWH,GAA9C;AACA,cAAMI,YAAY,GAAG,KAAKF,SAA1B;AACA5C,iBAAS,CAAC8C,YAAD,EAAe,0CAAf,CAAT9C;AACA,cAAM+C,YAAY,GAAGtB,SAAS,CAACc,MAAVd,CAAiBuB,iBAAjBvB,CACnBa,MADmBb,EAEnBqB,YAFmBrB,CAArB;AAIA,cAAMwB,QAAQ,GAAGF,YAAY,KAAK,IAAjBA,GAAwBD,YAAxBC,GAAuCA,YAAxD;;AAEA,cAAMG,oBAAoB,GAAG,MAAM;AACjC,eAAKC,uBAAL,CAA6BC,OAA7B,CAAsCC,UAAD,IACnCA,UAAU,CAAC;AACTC,gBAAI,EAAE,QADG;AAEThB,kBAFS;AAGTO,iBAAK,EAAEI,QAHE;AAITM,qBAAS,EAAET;AAJF,WAAD,CADZ;AADF;;AAWA,YAAIC,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA;AACAG,8BAAoB;AACpB,iBAAO,IAAP;AACD;;AAED,YAAID,QAAQ,KAAKH,YAAjB,EAA+B;AAC7B;AACA,eAAKF,SAAL,GAAiBK,QAAjB;AACA,eAAKO,QAAL,CAAc;AAAEd,eAAG,EAAEO;AAAP,WAAd,EAAiC,MAAM;AACrC,iBAAKQ,wBAAL,CAA8BX,YAA9B,EAA4CG,QAA5C,EAAsDX,MAAtD;;AACAY,gCAAoB;;AACpB,iBAAKQ,uBAAL,CAA6BT,QAA7B;AAHF;AAKA,iBAAO,IAAP;AACD;;AAEDC,4BAAoB;AACpB,eAAO,KAAP;AAlSiB;;AAAApB,+CAqSD,MAAM,KAAK1B,KAAL,CAAWM,WArShB;;AAAAoB,yCAuSP,MAAM;AAChB,YAAI,KAAK1B,KAAL,CAAWS,KAAX,KAAqB,OAArB,IAAgC,KAAKT,KAAL,CAAWS,KAAX,KAAqB,MAAzD,EAAiE;AAC/D,iBAAO,KAAKT,KAAL,CAAWS,KAAlB;AADF,eAEO,IAAI,KAAKT,KAAL,CAAWS,KAAX,KAAqB,eAAzB,EAA0C;AAC/C,iBAAO,OAAP;AADK,eAEA;AACLL,iBAAO,CAACC,IAARD,mCAC6B,KAAKJ,KAAL,CAAWS,KADxC;AAGA,iBAAO,OAAP;AACD;AAjTgB;;AAGjBP,mBAAa,CAACF,KAAD,CAAbE;AAEA,WAAKqD,cAAL,GAAsBhE,iBAAiB,CAACiE,IAAlBjE,EAAtB;;AAEA,UACE,KAAKkE,WAAL,MACAnE,WADA,IAEA,OAAOA,WAAW,CAACoE,gBAAnB,KAAwC,UAH1C,EAIE;AACA,aAAKC,IAAL,GAAYrE,WAAW,CAACoE,gBAAZpE,CAA6B,mBAA7BA,EAAkD,MAAM;AAClE,cAAI,CAAC,KAAKsE,UAAV,EAAsB;AACpB,iBAAKD,IAAL,IAAa,KAAKA,IAAL,CAAUE,MAAV,EAAb;AADF,iBAEO;AACL;AACA;AACA;AACA,mBAAO,KAAKxB,QAAL,CAAc9C,iBAAiB,CAACuE,IAAlBvE,EAAd,CAAP;AACD;AARS,UAAZ;AAUD;;AAED,WAAKkD,KAAL,GAAa;AACXH,WAAG,EACD,KAAKmB,WAAL,MAAsB,CAACzD,KAAK,CAACQ,mBAA7B,GACIa,SAAS,CAACc,MAAVd,CAAiBuB,iBAAjBvB,CAAmC,KAAKkC,cAAxClC,CADJ,GAEI;AAJK,OAAb;AAMD;;AAED0C,kBAAc,GAAG;AACf,aAAO,KAAK/D,KAAL,CAAWgE,yBAAX,GACH,KAAKhE,KAAL,CAAWgE,yBAAX,EADG,GAEH,IAFJ;AAGD;;AAEDP,eAAW,GAAG;AACZ,aAAO1D,UAAU,CAAC,KAAKC,KAAN,CAAjB;AACD;;AAiBDqD,4BAAwB,CAACY,OAAD,EAAU3B,GAAV,EAAeJ,MAAf,EAAuB;AAC7C,UACE,OAAO,KAAKlC,KAAL,CAAWkE,uBAAlB,KAA8C,WAA9C,IACA,KAAKT,WAAL,EADA,IAEA,CAAC,CAACU,OAAO,CAACC,GAARD,CAAYE,iBAHhB,EAIE;AACA,YAAIjE,OAAO,CAACkE,KAAZ,EAAmB;AACjBlE,iBAAO,CAACkE,KAARlE,CAAc,uBAAdA;AACAA,iBAAO,CAACmE,GAARnE,CAAY,UAAZA,EAAwB8B,MAAxB9B;AACAA,iBAAO,CAACmE,GAARnE,CAAY,aAAZA,EAA2BkC,GAA3BlC;AACAA,iBAAO,CAACmE,GAARnE,CAAY,cAAZA,EAA4B6D,OAA5B7D;AACAA,iBAAO,CAACoE,QAARpE;AALF,eAMO;AACLA,iBAAO,CAACmE,GAARnE,CAAY,uBAAZA,EAAqC;AACnC8B,kBADmC;AAEnCuC,oBAAQ,EAAEnC,GAFyB;AAGnCa,qBAAS,EAAEc;AAHwB,WAArC7D;AAKD;;AACD;AACD;;AAED,UAAI,OAAO,KAAKJ,KAAL,CAAWkE,uBAAlB,KAA8C,UAAlD,EAA8D;AAC5D,aAAKlE,KAAL,CAAWkE,uBAAX,CAAmCD,OAAnC,EAA4C3B,GAA5C,EAAiDJ,MAAjD;AACD;AACF;;AAEDwC,sBAAkB,GAAG;AACnB;AACA,UAAI,KAAKlC,SAAL,KAAmB,KAAKC,KAAL,CAAWH,GAAlC,EAAuC;AACrC,aAAKE,SAAL,GAAiB,IAAjB;AACD;AACF;;AAED,UAAMmC,iBAAN,GAA0B;AACxB,WAAKf,UAAL,GAAkB,IAAlB;;AACA,UAAI,CAAC,KAAKH,WAAL,EAAL,EAAyB;AACvB;AACD;;AAED,UAAIU,OAAO,CAACC,GAARD,CAAYS,QAAZT,KAAyB,YAAzBA,IAAyC,CAAC,KAAKnE,KAAL,CAAW6E,QAAzD,EAAmE;AACjE,YAAI5D,uBAAuB,GAAG,CAA9B,EAAiC;AAC/B;AACA;AACA,cAAI5B,QAAQ,CAACyF,EAATzF,KAAgB,KAApB,EAA2B;AACzBe,mBAAO,CAACC,IAARD,sKACgKP,OAAO,CACnK,mEADmK,CADvK;AAKD;AACF;AACF;;AACDoB,6BAAuB;AACvB,WAAK8D,WAAL,GAAmB3F,OAAO,CAACsE,gBAARtE,CAAyB,KAAzBA,EAAgC,KAAK4F,cAArC5F,CAAnB,CApBwB,CAsBxB;;AACA,UAAI2C,SAAS,GAAG,IAAhB;AACA,UAAIkD,wBAAwB,GAAG,IAA/B;;AACA,UAAI,KAAKjF,KAAL,CAAW6B,iBAAX,KAAiC,KAArC,EAA4C;AAC1C,SAAC;AACCE,mBADD;AAECkD;AAFD,YAGG,MAAM,KAAKC,gBAAL,EAHV;AA1BsB,QAgCxB;AACA;AACA;;;AACA,UAAIhD,MAAM,GAAG,KAAKqB,cAAlB,CAnCwB,CAoCxB;;AACA,UAAI4B,YAAY,GAAG,KAAK1C,KAAL,CAAWH,GAA9B;;AACA,UAAI,CAAC6C,YAAD,IAAiB,CAACF,wBAAtB,EAAgD;AAC9C,SAAC,CAACd,OAAO,CAACC,GAARD,CAAYE,iBAAd,IACEjE,OAAO,CAACmE,GAARnE,CAAY,2BAAZA,CADF;AAEA+E,oBAAY,GAAG9D,SAAS,CAACc,MAAVd,CAAiBuB,iBAAjBvB,CAAmCa,MAAnCb,CAAf8D;AAzCsB,QA4CxB;;;AACA,UAAIF,wBAAJ,EAA8B;AAC5BE,oBAAY,GAAGF,wBAAfE;AACAhE,wCAAgC,GAAG,IAAnCA;AA/CsB,QAkDxB;;;AACA,UAAIY,SAAJ,EAAe;AACb,cAAM;AAAEC,cAAF;AAAQC;AAAR,YAAmBF,SAAzB;AACA,cAAMqD,SAAS,GAAG/D,SAAS,CAACc,MAAVd,CAAiBe,yBAAjBf,CAChBW,IADgBX,EAEhBY,MAFgBZ,CAAlB;;AAIA,YAAI+D,SAAJ,EAAe;AACb,WAAC,CAACjB,OAAO,CAACC,GAARD,CAAYE,iBAAd,IACEjE,OAAO,CAACmE,GAARnE,CACE,6CADFA,EAEE2B,SAFF3B,CADF;AAKA8B,gBAAM,GAAGkD,SAATlD;AACAiD,sBAAY,GAAG9D,SAAS,CAACc,MAAVd,CAAiBuB,iBAAjBvB,CACb+D,SADa/D,EAEb8D,YAFa9D,CAAf8D;AAID;AACF;;AAED,YAAME,eAAe,GAAG,MACtB,KAAKtC,uBAAL,CAA6BC,OAA7B,CAAsCC,UAAD,IACnCA,UAAU,CAAC;AACTC,YAAI,EAAE,QADG;AAEThB,cAFS;AAGTO,aAAK,EAAE,KAAKA,KAAL,CAAWH,GAHT;AAITa,iBAAS,EAAE;AAJF,OAAD,CADZ,CADF;;AAUA,UAAIgC,YAAY,KAAK,KAAK1C,KAAL,CAAWH,GAAhC,EAAqC;AACnC+C,uBAAe;AACf;AAnFsB,QAsFxB;;;AACA,WAAKjC,QAAL,CAAc;AAAEd,WAAG,EAAE6C;AAAP,OAAd,EAAqC,MAAM;AACzChE,wCAAgC,GAAG,KAAnCA;AACAkE,uBAAe;AAFjB;AAID;;AAED,UAAMH,gBAAN,GAAyB;AACvB,YAAM;AAAEpD,iBAAF;AAAatB;AAAb,UAAqC,KAAKR,KAAhD;AACA,UAAI4B,GAAJ,EAAS0D,cAAT;;AACA,UAAI;AACF,SAAC1D,GAAD,EAAM0D,cAAN,IAAwB,MAAMC,OAAO,CAACC,GAARD,CAAY,CACxCnG,OAAO,CAACqG,aAARrG,EADwC,EAExCoB,mBAAmB,IAAIA,mBAAmB,EAFF,CAAZ+E,CAA9B;AADF,QAKE,OAAOhD,GAAP,EAAY,CACZ;AACD;;AACD,aAAO;AACLR,iBAAS,EAAEH,GAAG,IAAI9B,kBAAkB,CAAC8B,GAAD,EAAME,SAAN,CAD/B;AAELmD,gCAAwB,EAAEK;AAFrB,OAAP;AAID;;AAEDI,qBAAiB,CAACC,CAAD,EAAI;AACnB,UAAIxE,gCAAJ,EAAsC;AACpCA,wCAAgC,GAAG,KAAnCA;AACAf,eAAO,CAACC,IAARD,CACE,gIADFA;AAGA,aAAKiC,QAAL,CAAc9C,iBAAiB,CAACiE,IAAlBjE,EAAd;AALF,aAMO;AACL,cAAMoG,CAAN;AACD;AACF;;AAeDC,wBAAoB,GAAG;AAAA;;AACrB,WAAKhC,UAAL,GAAkB,KAAlB,CADqB,CAGrB;;AACA,+BAAI,KAAKmB,WAAT,sDAAIc,kBAAkBhC,MAAtB,EAA8B;AAAA;;AAC5B,mCAAKkB,WAAL,0EAAkBlB,MAAlB;AADF,aAEO;AACLzE,eAAO,CAAC0G,mBAAR1G,CAA4B,KAA5BA,EAAmC,KAAK4F,cAAxC5F;AACD;;AAED,WAAKuE,IAAL,IAAa,KAAKA,IAAL,CAAUE,MAAV,EAAb;;AAEA,UAAI,KAAKJ,WAAL,EAAJ,EAAwB;AACtBxC,+BAAuB;AACxB;AAjQ6C,MAoQhD;;;AAiEA8E,UAAM,GAAG;AACP,UAAI9F,UAAU,GAAG,KAAKD,KAAL,CAAWC,UAA5B;;AACA,UAAI,KAAKwD,WAAL,EAAJ,EAAwB;AACtB,cAAMZ,QAAQ,GAAG,KAAKJ,KAAL,CAAWH,GAA5B;;AACA,YAAI,CAACO,QAAL,EAAe;AACb,iBAAO,KAAKkB,cAAL,EAAP;AACD;;AACD,YAAI,CAAC,KAAKiC,WAAN,IAAqB,KAAKA,WAAL,CAAiBvD,KAAjB,KAA2BI,QAApD,EAA8D;AAC5D,eAAKmD,WAAL,GAAmBtG,aAAa,CAC9B2B,SAAS,CAACc,MADoB,EAE9BU,QAF8B,EAG9B,KAAKR,QAHyB,EAI9B,KAAKU,uBAJyB,EAK9B,KAAKkD,eALyB,EAM9B,MAAM,KAAKD,WANmB,CAAhC;AAQD;;AACD/F,kBAAU,GAAG,KAAK+F,WAAlB/F;AACD;;AACDL,eAAS,CAACK,UAAD,EAAa,0BAAb,CAATL;AAEA,0BACET,oBAACK,aAAD;AAAe0G,aAAK,EAAE,KAAKC,SAAL;AAAtB,sBACEhH,oBAACQ,kBAAD;AAAoBuG,aAAK,EAAEjG;AAA3B,sBACEd,oBAACkC,SAAD,eAAe,KAAKrB,KAApB;AAA2BC,kBAAU,EAAEA;AAAvC,SADF,CADF,CADF;AAOD;;AAjW+C;;AADSyB,kBACrDJ,mBADqD,YAIzCD,SAAS,CAACc,MAJ+B;;AAAAT,kBACrDJ,mBADqD,uBAK9B,IAL8B;;AAAAI,kBACrDJ,mBADqD,kBAOnC;AACpBb,SAAK,EAAE;AADa,GAPmC;;AAqW3D,SAAOa,mBAAP;AACD","names":["React","Linking","Platform","BackHandler","NavigationActions","ThemeProvider","pathUtils","getNavigation","NavigationProvider","invariant","docsUrl","urlToPathAndParams","isStateful","props","navigation","validateProps","persistenceKey","console","warn","screenProps","persistNavigationState","loadNavigationState","theme","containerProps","keys","Object","length","Error","join","undefined","_statefulContainerCount","_TESTING_ONLY_reset_container_count","_reactNavigationIsHydratingState","createNavigationContainer","Component","NavigationContainer","getDerivedStateFromProps","nextProps","constructor","_defineProperty","Set","url","enableURLHandling","uriPrefix","parsedUrl","path","params","action","router","getActionForPathAndParams","dispatch","nav","err","_navState","state","lastNavState","reducedState","getStateForAction","navState","dispatchActionEvents","_actionEventSubscribers","forEach","subscriber","type","lastState","setState","_onNavigationStateChange","_persistNavigationState","_initialAction","init","_isStateful","addEventListener","subs","_isMounted","remove","back","_renderLoading","renderLoadingExperimental","prevNav","onNavigationStateChange","process","env","REACT_NAV_LOGGING","group","log","groupEnd","newState","componentDidUpdate","componentDidMount","NODE_ENV","detached","OS","_linkingSub","_handleOpenURL","userProvidedStartupState","getStartupParams","startupState","urlAction","dispatchActions","loadedNavState","Promise","all","getInitialURL","componentDidCatch","e","componentWillUnmount","_this$_linkingSub","removeEventListener","render","_navigation","_getScreenProps","value","_getTheme"],"sources":["/Users/erdemoden/Desktop/React-js/blog-app/node_modules/@react-navigation/native/lib/module/createAppContainer.js"],"sourcesContent":["/* eslint-disable react/sort-comp */\n\nimport * as React from 'react';\nimport { Linking, Platform, BackHandler } from 'react-native';\nimport {\n  NavigationActions,\n  ThemeProvider,\n  pathUtils,\n  getNavigation,\n  NavigationProvider,\n} from '@react-navigation/core';\nimport invariant from './utils/invariant';\nimport docsUrl from './utils/docsUrl';\n\nconst { urlToPathAndParams } = pathUtils;\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn(\n      'You passed persistenceKey prop to a navigator. ' +\n        'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' +\n        'please see the navigation state persistence docs for more information. ' +\n        'Passing the persistenceKey prop is a no-op.'\n    );\n  }\n  if (isStateful(props)) {\n    return;\n  }\n  /* eslint-disable no-unused-vars */\n  const {\n    navigation,\n    screenProps,\n    persistNavigationState,\n    loadNavigationState,\n    theme,\n    ...containerProps\n  } = props;\n  /* eslint-enable no-unused-vars */\n\n  const keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error(\n      'This navigator has both navigation and container props, so it is ' +\n        `unclear if it should own its own state. Remove props: \"${keys.join(\n          ', '\n        )}\" ` +\n        'if the navigator should get its state from the navigation prop. If the ' +\n        'navigator should maintain its own state, do not pass a navigation prop.'\n    );\n  }\n  invariant(\n    (persistNavigationState === undefined &&\n      loadNavigationState === undefined) ||\n      (typeof persistNavigationState === 'function' &&\n        typeof loadNavigationState === 'function'),\n    'both persistNavigationState and loadNavigationState must either be undefined, or be functions'\n  );\n}\n\n// Track the number of stateful container instances. Warn if >0 and not using the\n// detached prop to explicitly acknowledge the behavior. We should deprecated implicit\n// stateful navigation containers in a future release and require a provider style pattern\n// instead in order to eliminate confusion entirely.\nlet _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\n// We keep a global flag to catch errors during the state persistence hydrating scenario.\n// The innermost navigator who catches the error will dispatch a new init action.\nlet _reactNavigationIsHydratingState = false;\n// Unfortunate to use global state here, but it seems necessesary for the time\n// being. There seems to be some problems with cascading componentDidCatch\n// handlers. Ideally the inner non-stateful navigator catches the error and\n// re-throws it, to be caught by the top-level stateful navigator.\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    subs = null;\n\n    static router = Component.router;\n    static navigationOptions = null;\n\n    static defaultProps = {\n      theme: 'light',\n    };\n\n    static getDerivedStateFromProps(nextProps) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    _actionEventSubscribers = new Set();\n\n    constructor(props) {\n      super(props);\n\n      validateProps(props);\n\n      this._initialAction = NavigationActions.init();\n\n      if (\n        this._isStateful() &&\n        BackHandler &&\n        typeof BackHandler.addEventListener === 'function'\n      ) {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav:\n          this._isStateful() && !props.loadNavigationState\n            ? Component.router.getStateForAction(this._initialAction)\n            : null,\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental\n        ? this.props.renderLoadingExperimental()\n        : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _handleOpenURL = ({ url }) => {\n      const { enableURLHandling, uriPrefix } = this.props;\n      if (enableURLHandling === false) {\n        return;\n      }\n      const parsedUrl = urlToPathAndParams(url, uriPrefix);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (\n        typeof this.props.onNavigationStateChange === 'undefined' &&\n        this._isStateful() &&\n        !!process.env.REACT_NAV_LOGGING\n      ) {\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav,\n          });\n        }\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      // Clear cached _navState every tick\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    async componentDidMount() {\n      this._isMounted = true;\n      if (!this._isStateful()) {\n        return;\n      }\n\n      if (process.env.NODE_ENV !== 'production' && !this.props.detached) {\n        if (_statefulContainerCount > 0) {\n          // Temporarily only show this on iOS due to this issue:\n          // https://github.com/react-navigation/react-navigation/issues/4196#issuecomment-390827829\n          if (Platform.OS === 'ios') {\n            console.warn(\n              `You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: ${docsUrl(\n                'common-mistakes.html#explicitly-rendering-more-than-one-navigator'\n              )}`\n            );\n          }\n        }\n      }\n      _statefulContainerCount++;\n      this._linkingSub = Linking.addEventListener('url', this._handleOpenURL);\n\n      // Pull out anything that can impact state\n      let parsedUrl = null;\n      let userProvidedStartupState = null;\n      if (this.props.enableURLHandling !== false) {\n        ({\n          parsedUrl,\n          userProvidedStartupState,\n        } = await this.getStartupParams());\n      }\n\n      // Initialize state. This must be done *after* any async code\n      // so we don't end up with a different value for this.state.nav\n      // due to changes while async function was resolving\n      let action = this._initialAction;\n      // eslint-disable-next-line react/no-access-state-in-setstate\n      let startupState = this.state.nav;\n      if (!startupState && !userProvidedStartupState) {\n        !!process.env.REACT_NAV_LOGGING &&\n          console.log('Init new Navigation State');\n        startupState = Component.router.getStateForAction(action);\n      }\n\n      // Pull user-provided persisted state\n      if (userProvidedStartupState) {\n        startupState = userProvidedStartupState;\n        _reactNavigationIsHydratingState = true;\n      }\n\n      // Pull state out of URL\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const urlAction = Component.router.getActionForPathAndParams(\n          path,\n          params\n        );\n        if (urlAction) {\n          !!process.env.REACT_NAV_LOGGING &&\n            console.log(\n              'Applying Navigation Action for Initial URL:',\n              parsedUrl\n            );\n          action = urlAction;\n          startupState = Component.router.getStateForAction(\n            urlAction,\n            startupState\n          );\n        }\n      }\n\n      const dispatchActions = () =>\n        this._actionEventSubscribers.forEach((subscriber) =>\n          subscriber({\n            type: 'action',\n            action,\n            state: this.state.nav,\n            lastState: null,\n          })\n        );\n\n      if (startupState === this.state.nav) {\n        dispatchActions();\n        return;\n      }\n\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({ nav: startupState }, () => {\n        _reactNavigationIsHydratingState = false;\n        dispatchActions();\n      });\n    }\n\n    async getStartupParams() {\n      const { uriPrefix, loadNavigationState } = this.props;\n      let url, loadedNavState;\n      try {\n        [url, loadedNavState] = await Promise.all([\n          Linking.getInitialURL(),\n          loadNavigationState && loadNavigationState(),\n        ]);\n      } catch (err) {\n        // ignore\n      }\n      return {\n        parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n        userProvidedStartupState: loadedNavState,\n      };\n    }\n\n    componentDidCatch(e) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn(\n          'Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...'\n        );\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    _persistNavigationState = async (nav) => {\n      const { persistNavigationState } = this.props;\n      if (persistNavigationState) {\n        try {\n          await persistNavigationState(nav);\n        } catch (err) {\n          console.warn(\n            'Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.'\n          );\n        }\n      }\n    };\n\n    componentWillUnmount() {\n      this._isMounted = false;\n\n      // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n      if (this._linkingSub?.remove) {\n        this._linkingSub?.remove();\n      } else {\n        Linking.removeEventListener('url', this._handleOpenURL);\n      }\n\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    }\n\n    // Per-tick temporary storage for state.nav\n\n    dispatch = (action) => {\n      if (this.props.navigation) {\n        return this.props.navigation.dispatch(action);\n      }\n\n      // navState will have the most up-to-date value, because setState sometimes behaves asyncronously\n      this._navState = this._navState || this.state.nav;\n      const lastNavState = this._navState;\n      invariant(lastNavState, 'should be set in constructor if stateful');\n      const reducedState = Component.router.getStateForAction(\n        action,\n        lastNavState\n      );\n      const navState = reducedState === null ? lastNavState : reducedState;\n\n      const dispatchActionEvents = () => {\n        this._actionEventSubscribers.forEach((subscriber) =>\n          subscriber({\n            type: 'action',\n            action,\n            state: navState,\n            lastState: lastNavState,\n          })\n        );\n      };\n\n      if (reducedState === null) {\n        // The router will return null when action has been handled and the state hasn't changed.\n        // dispatch returns true when something has been handled.\n        dispatchActionEvents();\n        return true;\n      }\n\n      if (navState !== lastNavState) {\n        // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n        this._navState = navState;\n        this.setState({ nav: navState }, () => {\n          this._onNavigationStateChange(lastNavState, navState, action);\n          dispatchActionEvents();\n          this._persistNavigationState(navState);\n        });\n        return true;\n      }\n\n      dispatchActionEvents();\n      return false;\n    };\n\n    _getScreenProps = () => this.props.screenProps;\n\n    _getTheme = () => {\n      if (this.props.theme === 'light' || this.props.theme === 'dark') {\n        return this.props.theme;\n      } else if (this.props.theme === 'no-preference') {\n        return 'light';\n      } else {\n        console.warn(\n          `Invalid theme provided: ${this.props.theme}. Only 'light' and 'dark' are supported. Falling back to 'light'`\n        );\n        return 'light';\n      }\n    };\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        const navState = this.state.nav;\n        if (!navState) {\n          return this._renderLoading();\n        }\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(\n            Component.router,\n            navState,\n            this.dispatch,\n            this._actionEventSubscribers,\n            this._getScreenProps,\n            () => this._navigation\n          );\n        }\n        navigation = this._navigation;\n      }\n      invariant(navigation, 'failed to get navigation');\n\n      return (\n        <ThemeProvider value={this._getTheme()}>\n          <NavigationProvider value={navigation}>\n            <Component {...this.props} navigation={navigation} />\n          </NavigationProvider>\n        </ThemeProvider>\n      );\n    }\n  }\n\n  return NavigationContainer;\n}\n"]},"metadata":{},"sourceType":"module"}